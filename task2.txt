/* ГПУМДДИМ - Генератор почти уникальных Моного данных для интернет магазина by Vladimirov D.A. */

/* Categories doc example */
/*
doc2 = {
    _id: new ObjectId('63de7f7a208e56eb9e4b7d35'),
    slug: 'gardening-tools',
    ancestors: [
        {
            name: 'home',
            _id: new ObjectId('63de7f7a208e56eb9e4b7d34'),
            slug: 'home',
        },
        {
            name: 'outdoors',
            _id: new ObjectId('63de7f7a208e56eb9e4b7d33'),
            slug: 'outdoors',
        }
    ],
    parent_id: new ObjectId('63de7f7a208e56eb9e4b7d33'),
    name: 'Gardering Tools',
    description: 'gardering gadgets ...',
}
db.categories.insertOne(doc2)
*/

// Generate categories
function GenCategories(categoriesCount = 10) {
    let arrDocs = []

    let ancestors = []
    let ancesorsNames = ['home', 'outdoors', 'tools', 'gadgets', 'supplies', 'equipment', 'accessories', 'gardening', 'gardering', 'garden']

    for (let i = 0; i < categoriesCount; i++) {
        let name = ancesorsNames.splice(Math.floor(Math.random() * ancesorsNames.length), 1)[0]
        ancestors.push({
            name: name,
            _id: new ObjectId(),
            slug: name.toString().replace(/ /g, '-'),
        })
    }

    let childCategoriesNames = ['cat #1', 'cat #2', 'cat #3', 'cat #4', 'cat #5', 'cat #6', 'cat #7', 'cat #8',
                                'cat #9', 'cat #10', 'cat #11', 'cat #12', 'cat #13', 'cat #14', 'cat #15',
                                'cat #16', 'cat #17', 'cat #18', 'cat #19', 'cat #20'
    ]

    for (let i = 0; i < 20; i++) {
        let name = childCategoriesNames.splice(Math.floor(Math.random() * childCategoriesNames.length), 1)[0]
        let currentAncestors = [
                ...Array(Math.floor(Math.random() * 3) + 1).fill(0).map(() => ancestors[Math.floor(Math.random() * ancestors.length)]).filter((v, i, a) => a.indexOf(v) === i)
            ]
        doc = {
            _id: new ObjectId(),
            slug: name.toLowerCase().replace(/ /g, '-'),
            ancestors: currentAncestors,
            name: name,
            description: Array(Math.floor(Math.random() * 40) + 1).fill('gardering gadgets ...').join(' '),
        }
        if (currentAncestors.length) {
            doc.parent_id = currentAncestors[currentAncestors.length - 1]._id
        }

        arrDocs.push(doc)
    }

    return arrDocs
}

/* Products doc example */
/*
doc = {
    _id: new ObjectId('4c4b1476238d3b4dd5003981'),
    slug: 'wheel-barrow-9092',
    sku: '9092',
    name: 'Extra large wheel barrow',
    description: 'Heavy duty wheel barrow',
    details: {
        weight: 47,
        weight_units: 'lbs',
        model_num: 4039283402,
        manufactured: 'Acme',
        color: 'green',
    },
    total_reviews: 4,
    average_review: 4.5,
    pricing: {
        retail: 589700,
        sale: 498700,
    },
    pricing_history: [
        {
            retail: 529700,
            sale: 429700,
            start: new Date(2919, 4, 1),
            end: new Date(2010, 4, 8),
        },
        {
            retail: 529700,
            sale: 529700,
            start: new Date(2010, 4, 9),
            end: new Date(2010, 4, 16)
        },
    ],
    category_ids: [
        new ObjectId('6a5b1476238d3b4dd5000048'),
        new ObjectId('6a5b1476238d3b4dd5000049'),
    ],
    main_cat_id: new ObjectId('6a5b1476238d3b4dd5000048'),
    tags: [
        'tools',
        'gardening',
        'soil',
    ]
}
*/

// Generate products
function GenProducts(productsCount = 100) {
    let arrDocs = []

    let categories = db.categories.find().toArray()
    let tags = ['tools', 'gardening', 'soil', 'garden', 'outdoors', 'home', 'accessories', 'supplies', 'gift', 'equipment', 'holiday', 'landscaping']
    let nameLetters = 'abcdefghijklmnopqrstuvwxyz'.split('')
    let colors = ['green', 'red', 'blue', 'yellow', 'orange', 'purple']
    let manufacturers = ['Acme', 'Poi', 'Goo', 'Zoo', 'Foo', 'Bar', 'Baz', 'Qux', 'Quux', 'Corge', 'Grault', 'Garply', 'Waldo', 'Fred', 'Plugh', 'Xyzzy', 'Thud']

    for (let i = 0; i < productsCount; i++) {
        let sku = Array(Math.floor(Math.random() * 4) + 4).fill(0).map(() => Math.floor(Math.random() * 10)).join('')
        let name = Array(Math.floor(Math.random() * 3) + 1).fill(0).map(() => Array(Math.floor(Math.random() * 10) + 3).fill(0).map(() => nameLetters[Math.floor(Math.random() * nameLetters.length)]).join('')).join(' ')

        let currentCategories = [
            ...Array(Math.floor(Math.random() * 3) + 1).fill(0).map(() => categories[Math.floor(Math.random() * categories.length)]).filter((v, i, a) => a.indexOf(v) === i)
        ].map(v => v._id)

        let mainCatId = currentCategories[Math.floor(Math.random() * currentCategories.length)]

        let doc = {
            _id: new ObjectId(),
            slug: name.replace(/ /g, '-') + '-' + sku,
            sku: sku,
            name: name,
            description: Array(Math.floor(Math.random() * 40) + 1).fill('Heavy duty wheel barrow').join(' '),
            details: {
                weight: Math.floor(Math.random() * 100),
                weight_units: ['lbs', 'kg', 'oz'][Math.floor(Math.random() * 3)],
                model_num: Math.floor(Math.random() * 10000000000),
                manufactured: manufacturers[Math.floor(Math.random() * manufacturers.length)],
                color: colors[Math.floor(Math.random() * colors.length)],
            },
            total_reviews: 0,
            average_review: 3,
            pricing: {
                retail: Math.floor(Math.random() * 9000 + 1),
                sale: Math.floor(Math.random() * 9000 + 1),
            },
            pricing_history: [
                ...Array(Math.floor(Math.random() * 10)).fill(0).map(() => ({
                    retail: Math.floor(Math.random() * 1000000),
                    sale: Math.floor(Math.random() * 1000000),
                    start: new Date(Math.floor(Math.random() * 13) + 2010, Math.floor(Math.random() * 12) + 1, Math.floor(Math.random() * 28) + 1),
                    end: new Date(Math.floor(Math.random() * 13) + 2010, Math.floor(Math.random() * 12) + 1, Math.floor(Math.random() * 28) + 1)
                }))
            ],
            category_ids: currentCategories,
            main_cat_id: mainCatId,
            tags: [
                ...Array(Math.floor(Math.random() * 3) + 1).fill(0).map(() => tags[Math.floor(Math.random() * tags.length)]).filter((v, i, a) => a.indexOf(v) === i)
            ]
        }
        arrDocs.push(doc)
    }

    return arrDocs
}

/* Users doc example */
/*
doc0 = {
    _id: new ObjectId('63de7e015a0204da2005390d'),
    username: 'kbanker',
    email: 'kylebanker@gmail.com',
    first_name: 'Kyle',
    last_name: 'Banker',
    hashed_password: 'nj34hhcgo34lpsf,34.fs4lfp23i4us%38r7njx2398xm&(2mesi2',
    addresses: [
        {
            name: 'home',
            street: '558 5th Street',
            city: 'Brooklyn',
            state: 'NY',
            zip: 11215,
        },
        {
            name: 'work',
            street: '1 E. 23rd Street',
            city: 'New York',
            state: 'NY',
            zip: 10010,
        }
    ],
    payment_methods: [
        {
            name: 'VISA',
            last_four: 1227,
            crypted_name: '63de7ee9fd5e5dca4faf5000',
            expiration_date: new Date(2014, 4),
        }
    ],
}
db.users.insertOne(doc0)
*/

// Generate Users
function GenUsers(userCount = 10) {
    let arrDocs = []

    let nameLetters = 'abcdefghijklmnopqrstuvwxyz'.split('')
    let states = ['NY', 'CA', 'TX', 'FL', 'IL', 'PA', 'OH', 'GA', 'NC', 'MI', 'NJ', 'VA', 'WA', 'AZ', 'MA', 'TN', 'IN', 'MO', 'MD', 'WI', 'CO', 'MN', 'AL', 'SC', 'LA', 'KY', 'OR', 'OK', 'CT', 'UT', 'IA', 'NV', 'AR', 'MS', 'KS', 'NM', 'NE', 'WV', 'ID', 'HI', 'NH', 'ME', 'RI', 'MT', 'DE', 'SD', 'ND', 'AK', 'VT', 'WY']
    let cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia', 'Phoenix', 'San Antonio', 'San Diego', 'Dallas', 'San Jose', 'Austin', 'Jacksonville', 'San Francisco', 'Indianapolis', 'Columbus', 'Fort Worth', 'Charlotte', 'Detroit', 'El Paso', 'Memphis', 'Boston', 'Seattle', 'Denver', 'Baltimore', 'Washington', 'Nashville', 'Louisville', 'Milwaukee', 'Portland', 'Las Vegas', 'Oklahoma City', 'Albuquerque', 'Tucson', 'Fresno', 'Sacramento', 'Long Beach', 'Kansas City', 'Mesa', 'Atlanta', 'Virginia Beach', 'Omaha', 'Colorado Springs', 'Raleigh', 'Miami', 'Oakland', 'Minneapolis', 'Tulsa', 'Cleveland', 'Wichita', 'New Orleans', 'Arlington', 'Bakersfield', 'Tampa', 'Honolulu', 'Aurora', 'Anaheim', 'Santa Ana', 'St. Louis', 'Riverside', 'Corpus Christi', 'Pittsburgh', 'Lexington', 'Anchorage', 'Stockton', 'Cincinnati', 'St. Paul', 'Toledo', 'Greensboro', 'Newark', 'Plano', 'Henderson', 'Lincoln', 'Buffalo', 'Jersey City', 'Chula Vista', 'Fort Wayne', 'Orlando', 'St. Petersburg']
    let streets = ['Main', 'Park', 'First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth', 'Ninth', 'Tenth', 'Washington', 'Jefferson', 'Lincoln', 'Roosevelt', 'Jackson', 'Grant', 'Franklin', 'Adams', 'Madison', 'Monroe', 'Buchanan', 'Lincoln', 'Kennedy', 'Johnson', 'Nixon', 'Ford', 'Carter', 'Reagan', 'Bush', 'Clinton', 'Obama', 'Washington', 'Adams', 'Jefferson', 'Madison', 'Monroe', 'Adams', 'Jackson', 'Van Buren', 'Harrison', 'Tyler', 'Polk', 'Taylor', 'Fillmore', 'Pierce', 'Buchanan', 'Lincoln', 'Johnson', 'Grant', 'Hayes', 'Garfield', 'Arthur', 'Cleveland', 'Harrison', 'Cleveland', 'McKinley', 'Roosevelt', 'Taft', 'Wilson', 'Harding', 'Coolidge', 'Hoover', 'Roosevelt', 'Truman', 'Eisenhower', 'Kennedy', 'Johnson', 'Nixon', 'Ford', 'Carter', 'Reagan', 'Bush', 'Clinton', 'Bush', 'Obama', 'Washington', 'Adams', 'Jefferson', 'Madison', 'Monroe', 'Adams', 'Jackson', 'Van Buren', 'Harrison', 'Tyler', 'Polk', 'Taylor', 'Fillmore', 'Pierce', 'Buchanan', 'Lincoln', 'Johnson', 'Grant', 'Hayes', 'Garfield', 'Arthur', 'Cleveland', 'Harrison', 'Cleveland', 'McKinley', 'Roosevelt', 'Taft', 'Wilson', 'Harding', 'Coolidge', 'Hoover', 'Roosevelt', 'Truman', 'Eisenhower', 'Kennedy', 'Johnson', 'Nixon', 'Ford', 'Carter', 'Reagan', 'Bush', 'Clinton', 'Bush', 'Obama', 'Washington', 'Adams', 'Jefferson', 'Madison', 'Monroe', 'Adams', 'Jackson', 'Van Buren', 'Harrison', 'Tyler']
    let zipCodes = [10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011, 10012, 10013, 10014, 10015, 10016, 10017, 10018, 10019, 10020, 10021, 10022, 10023, 10024, 10025, 10026, 10027, 10028, 10029, 10030, 10031, 10032, 10033, 10034, 10035, 10036, 10037, 10038, 10039, 10040, 10041, 10042, 10043, 10044, 10045, 10046, 10047, 10048, 10049, 10050, 10051, 10052, 10053, 10054, 10055, 10056, 10057, 10058, 10059, 10060, 10061, 10062, 10063, 10064, 10065, 10066, 10067, 10068, 10069, 10070, 10071, 10072, 10073, 10074, 10075, 10076, 10077, 10078, 10079, 10080, 10081, 10082, 10083, 10084, 10085, 10086, 10087, 10088, 10089, 10090, 10091, 10092, 10093, 10094, 10095, 10096, 10097, 10098, 10099, 10100, 10101, 10102, 10103, 10104, 10105, 10106, 10107, 10108, 10109, 10110, 10111, 10112, 10113, 10114, 10115, 10116, 10117, 10118, 10119, 10120, 10121, 10122, 10123]
    let addressTypes = ['home', 'work', 'vacation']
    let paymentNames = ['VISA', 'Mastercard', 'Discover', 'American Express', 'МИР']

    for (let i = 0; i < userCount; i++) {
        let username = Array.from({length: 15}, () => nameLetters[Math.floor(Math.random() * nameLetters.length)]).join('');

        let firstName = username.slice(0, Math.floor(Math.random() * 7) + 3);
        firstName = firstName[0].toUpperCase() + firstName.slice(1);
        let lastName = username.slice(-Math.floor(Math.random() * 5) - 5);
        lastName = lastName[0].toUpperCase() + lastName.slice(1);

        let doc = {
            _id: new ObjectId(),
            username: username,
            email: username + '@gmail.com',
            first_name: firstName,
            last_name: lastName,
            hashed_password: Array.from({length: 63}, () => Math.random().toString(36).charAt(2)).join(''),
            addresses : [
                ...Array(Math.floor(Math.random() * 3 + 1)).fill(0).map(() => ({
                        name: addressTypes[Math.floor(Math.random() * addressTypes.length)],
                        street: streets[Math.floor(Math.random() * streets.length)] + ' ' + Math.floor(Math.random() * 1000),
                        city: cities[Math.floor(Math.random() * cities.length)],
                        state: states[Math.floor(Math.random() * states.length)],
                        zip: zipCodes[Math.floor(Math.random() * zipCodes.length)],
                }))
            ],
            payment_methods: [
                ...Array(Math.floor(Math.random() * 2 + 1)).fill(0).map(() => ({
                    name: paymentNames[Math.floor(Math.random() * paymentNames.length)],
                    last_four: Number(Array.from({length: 4}, () => Math.floor(Math.random() * 10)).join('')),
                    crypted_name: Array.from({length: 16}, () => Math.floor(Math.random() * 10)).join(''),
                    expiration_date: new Date(2020 + Math.floor(Math.random() * 10), Math.floor(Math.random() * 11 + 1), 1),
                }))
            ],
        }

        arrDocs.push(doc)
    }

    return arrDocs
}

/* Review doc example */
/*
doc1 = {
    _id: new ObjectId('4c4b1476238d3b4dd5000041'),
    product_id: new ObjectId('4c4b1476238d3b4dd5003981'),
    date: new Date(2010, 5, 7),
    title: 'Amazing',
    text: 'Has a squeaky wheel, but still a darn good wheel barrow.',
    rating: 4,
    user_id: new ObjectId('4c4b1476238d3b4dd5000041'),
    username: 'dgreenthumb',
    helpful_votes: 3,
    voter_ids: [
        new ObjectId('4c4b1476238d3b4dd5000041'),
        new ObjectId('7a4f0376238d3b4dd5000003'),
        new ObjectId('92c21476238d3b4dd5000032'),
    ]
}
db.reviews.insertOne(doc1)
*/

// Generate reviews
function UpdateProductsRating(productId, rating) {
    let product = db.products.findOne({_id: productId})
    let totalReviews = product.total_reviews + 1
    let averageReview = (product.average_review * product.total_reviews + rating) / totalReviews

    db.products.updateOne({_id: productId}, {$set: {average_review: averageReview, total_reviews: totalReviews}})
}

function GenReviews(reviewsCount = 2) {
    let arrDocs = []

    let nameLetters = 'abcdefghijklmnopqrstuvwxyz'.split('')

    let products = db.products.find().limit(100).toArray().map(v => v._id)
    let users = db.users.find().limit(30).toArray()

    for (let i = 0; i < reviewsCount; i++) {
        let currentUser = users[Math.floor(Math.random() * users.length)]
        let votedUsers = users.filter(v => v._id != currentUser._id).map(v => v._id)
        let helpfullVotes = Math.floor(Math.random() * votedUsers.length)

        let doc = {
            _id: new ObjectId(),
            product_id: products[Math.floor(Math.random() * products.length)],
            date: new Date(2010 + Math.floor(Math.random() * 10), Math.floor(Math.random() * 11 + 1), Math.floor(Math.random() * 27 + 1)),
            title: Array.from({length: Math.floor(Math.random() * 10 + 5)}, () => nameLetters[Math.floor(Math.random() * nameLetters.length)]).join(''),
            text: Array.from({length: Math.floor(Math.random() * 80 + 20)}, () => Array.from({length: Math.floor(Math.random() * 7 + 3)}, () => nameLetters[Math.floor(Math.random() * nameLetters.length)]).join('')).join(' ').replace(/(\w{3,10})/g, (match, p1) => Math.random() < 0.1 ? (Math.random() < 0.5 ? 'best' : 'worst') : p1),
            rating: Math.floor(Math.random() * 5 + 1),
            user_id: currentUser._id,
            username: currentUser.username,
            helpful_votes: helpfullVotes,
            voter_ids: votedUsers.slice(0, helpfullVotes),
        }

        UpdateProductsRating(doc.product_id, doc.rating)

        arrDocs.push(doc)
    }

    return arrDocs
}

/* Order doc example */
/*
doc3 = {
    _id: new ObjectId('63de80dd9154810be83acfcf'),
    user_id: ObjectId('63de80dd9154810be81acfcf'),
    state: 'CART',
    lines_items: [
        {
            _id: ObjectId('63de80dd9154810be81acfcd'),
            sku: '9092',
            name: 'Extra Large Wheel-barrow',
            quantity: 1,
            pricing: {
                retail: 1499,
                sale: 1299,
            },
        },
        {
            _id: ObjectId('63de80dd9154810be81acfcd'),
            sku: '9092',
            name: 'Extra Large Wheel-barrow',
            quantity: 2,
            pricing: {
                retail: 199,
                sale: 19,
            },
        },
    ],
    shipping_address: {
        street: '588 5th Street',
        city: 'Brooklyn',
        state: 'NY',
        zip: 11215
    },
    sub_total: 6196,
}
db.orders.insertOne(doc3)
*/

/* Generate Orders */
function GenOrders(ordersCount = 21) {
    let arrDocs = []

    let products = db.products.find().limit(100).toArray()
    let users = db.users.find().limit(30).toArray()

    let states = ['CART', 'PENDING', 'SHIPPED', 'DELIVERED', 'CANCELLED']

    for (let i = 0; i < ordersCount; i++) {
        let currentUser = users[Math.floor(Math.random() * users.length)]

        let currentProducts = products.filter(v => Math.random() > 0.5).slice(0, Math.floor(Math.random() * 5 + 1)).map(v => {
            v.quantity = Math.floor(Math.random() * 5 + 1)
            return v
        })

        let doc = {
            _id: new ObjectId(),
            user_id: currentUser._id,
            state: states[Math.floor(Math.random() * states.length)],
            lines_items: currentProducts.map(v => ({
                _id: v._id,
                sku: v.sku,
                name: v.name,
                quantity: v.quantity,
                pricing: {
                    retail: v.pricing.retail,
                    sale: v.pricing.sale,
                },
            })),
            shipping_address: {
                street: currentUser.addresses[0].street,
                city: currentUser.addresses[0].city,
                state: currentUser.addresses[0].state,
                zip: currentUser.addresses[0].zip,
            },
            sub_total: currentProducts.reduce((acc, v) => acc + v.pricing.sale * v.quantity, 0),
            created_at: new Date(2012 + Math.floor(Math.random() * 10), Math.floor(Math.random() * 11 + 1), Math.floor(Math.random() * 27 + 1)),
        }

        arrDocs.push(doc)
    }

    return arrDocs
}

//db.categories.insertMany(GenCategories())
//db.products.insertMany(GenProducts(100))
//db.users.insertMany(GenUsers(20))
//db.reviews.insertMany(GenReviews(110))
//db.orders.insertMany(GenOrders(312))
